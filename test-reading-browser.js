// Test simple des APIs de lecture avec un script browser
// Pour tester: Ouvrir la console du navigateur sur http://localhost:3000 et coller ce code

async function testReadingAPIs() {
  console.log('üß™ Test des APIs de lecture');
  
  // Simuler une connexion utilisateur (remplacez par un vrai token)
  const token = localStorage.getItem('token');
  if (!token) {
    console.log('‚ùå Aucun token d\'authentification trouv√©. Veuillez vous connecter d\'abord.');
    return;
  }
  
  try {
    // Test 1: R√©cup√©rer la progression actuelle
    console.log('üìñ Test r√©cup√©ration progression...');
    const progressResponse = await fetch('/api/reading/progress', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (progressResponse.ok) {
      const progressData = await progressResponse.json();
      console.log('‚úÖ Progression r√©cup√©r√©e:', progressData);
    } else {
      console.log('‚ùå Erreur r√©cup√©ration progression:', await progressResponse.text());
    }
    
    // Test 2: Enregistrer une progression
    console.log('üìù Test enregistrement progression...');
    const recordResponse = await fetch('/api/reading/progress', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        surahNumber: 1,
        verseNumber: 5,
        surahName: 'Al-Fatiha',
        readingTime: 30
      })
    });
    
    if (recordResponse.ok) {
      const recordData = await recordResponse.json();
      console.log('‚úÖ Progression enregistr√©e:', recordData);
    } else {
      console.log('‚ùå Erreur enregistrement progression:', await recordResponse.text());
    }
    
    // Test 3: Mettre √† jour l'objectif quotidien
    console.log('üéØ Test mise √† jour objectif...');
    const goalResponse = await fetch('/api/reading/goal', {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ dailyGoal: 15 })
    });
    
    if (goalResponse.ok) {
      const goalData = await goalResponse.json();
      console.log('‚úÖ Objectif mis √† jour:', goalData);
    } else {
      console.log('‚ùå Erreur mise √† jour objectif:', await goalResponse.text());
    }
    
    // Test 4: R√©cup√©rer les stats du dashboard
    console.log('üìä Test r√©cup√©ration dashboard...');
    const dashboardResponse = await fetch('/api/dashboard/stats', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (dashboardResponse.ok) {
      const dashboardData = await dashboardResponse.json();
      console.log('‚úÖ Stats dashboard r√©cup√©r√©es:', dashboardData);
    } else {
      console.log('‚ùå Erreur r√©cup√©ration dashboard:', await dashboardResponse.text());
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests
testReadingAPIs();
